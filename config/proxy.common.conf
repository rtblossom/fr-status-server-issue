#######################################################################
#
#  Configuration for the proxy realms.
#
#  As of 2.0, the "realm" configuration has changed.  Instead of
#  specifying "authhost" and "accthost" in a realm section, the home
#  servers are specified separately in a "home_server" section.  For
#  backwards compatibility, you can still use the "authhost" and
#  "accthost" directives.  If you only have one home server for a
#  realm, it is easier to use the old-style configuration.
#
#  However, if you have multiple servers for a realm, we STRONGLY
#  suggest moving to the new-style configuration.
#
#
#  Load-balancing and failover between home servers is handled via
#  a "home_server_pool" section.
#
#  Finally, The "realm" section defines the realm, some options, and
#  indicates which server pool should be used for the realm.
#
#  This change means that simple configurations now require multiple
#  sections to define a realm.  However, complex configurations
#  are much simpler than before, as multiple realms can share the same
#  server pool.
#
#  That is, realms point to server pools, and server pools point to
#  home servers.  Multiple realms can point to one server pool.  One
#  server pool can point to multiple home servers.  Each home server
#  can appear in one or more pools.
#
#  See sites-available/tls for an example of configuring home servers,
#  pools, and realms with TLS.
#

######################################################################
#
#  This section defines a "Home Server" which is another RADIUS
#  server that gets sent proxied requests.  In earlier versions
#  of FreeRADIUS, home servers were defined in "realm" sections,
#  which was awkward.  In 2.0, they have been made independent
#  from realms, which is better for a number of reasons.
#

proxy server {
    default_fallback = no
}

# RadSec Host 1
home_server radsec1 {
    type =  auth+acct
    ipaddr = $ENV{RADSEC_HOST1}
    port = 2083
    secret = radsec
    proto = tcp
    status_check = status-server
    check_interval = 10
    check_timeout = 1
    num_answers_to_alive = 3
    response_window = 7
    response_timeouts = 5
    limit {
        max_connections = 128
        lifetime = 0
        idle-timeout = 30
    }
    tls {
        tls_min_version = "1.2"
        private_key_file = $ENV{CLIENT_KEY_LOCATION}
        certificate_file = $ENV{CLIENT_CRT_LOCATION}
        ca_file = $ENV{CA_CRT_LOCATION}
        fragment_size = 8192
    }
}

# RadSec Host 2
home_server radsec2 {
    type =  auth+acct
    ipaddr = $ENV{RADSEC_HOST2}
    port = 2083
    secret = radsec
    proto = tcp
    status_check = status-server
    check_interval = 10
    check_timeout = 1
    num_answers_to_alive = 3
    response_window = 7
    response_timeouts = 5
    limit {
        max_connections = 128
        lifetime = 0
        idle-timeout = 30
    }
    tls {
        tls_min_version = "1.2"
        private_key_file = $ENV{CLIENT_KEY_LOCATION}
        certificate_file = $ENV{CLIENT_CRT_LOCATION}
        ca_file = $ENV{CA_CRT_LOCATION}
        fragment_size = 8192
    }
}

home_server_pool radsec_pool {
    type=keyed-balance
    home_server = radsec1
    home_server = radsec2
    nostrip
}

realm DEFAULT {
	auth_pool = radsec_pool
	acct_pool = radsec_pool
	nostrip
}


